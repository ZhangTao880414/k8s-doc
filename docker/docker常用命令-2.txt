https://blog.csdn.net/leilei1366615/article/details/106267225

查看端口： netstat -lanp |grep tcp |grep docker

（一）docker 基础命令
启动docker
systemctl start docker

关闭docker
systemctl stop docker

重启docker
systemctl restart docker

docker设置随服务启动而自启动
systemctl enable docker

查看docker 运行状态
------如果是在运行中 输入命令后 会看到绿色的active
systemctl status docker

查看docker 版本号信息
docker version

docker info
-----------------------------------------------------

查看自己服务器中docker 镜像列表
docker images

搜索镜像
docker search 镜像名
docker search --filter=STARS=9000 mysql 搜索 STARS >9000的 mysql 镜像

拉取镜像 不加tag(版本号) 即拉取docker仓库中 该镜像的最新版本latest 加:tag 则是拉取指定版本
docker pull 镜像名 
docker pull 镜像名:tag

运行镜像 ----咱拉取一个tomcat 跑起来试一试
docker run 镜像名
docker run 镜像名:Tag


删除镜像 ------当前镜像没有被任何容器使用才可以删除
#删除一个
docker rmi -f 镜像名/镜像ID

#删除多个 其镜像ID或镜像用用空格隔开即可 
docker rmi -f 镜像名/镜像ID 镜像名/镜像ID 镜像名/镜像ID

#删除全部镜像  -a 意思为显示全部, -q 意思为只显示ID
docker rmi -f $(docker images -aq)

#强制删除镜像
docker image rm 镜像名称/镜像ID


保存镜像
将我们的镜像 保存为tar 压缩文件 这样方便镜像转移和保存 ,然后 可以在任何一台安装了docker的服务器上 加载这个镜像
命令:
docker save 镜像名/镜像ID -o 镜像保存在哪个位置与名字

exmaple:
docker save tomcat -o /myimg.tar

运行中的容器保存为镜像
docker commit 
docker save -o
例子：
[root@localhost home]# docker ps
48a5d4ab2591   jenkins/jenkins:lts   "/sbin/tini -- /usr/…"   
[root@localhost home]# docker commit 48a5d4ab2591 jenkinx-run
sha256:44d5e4e3bfc308c1181836f2c2d1d1e2c12811723d2c9e4ad6af2aef6c5ca106
[root@localhost home]# docker save -o jenkinx-run.img jenkinx-run
[root@localhost home]# docker images
REPOSITORY         TAG             IMAGE ID       CREATED          SIZE
jenkinx-run        latest          44d5e4e3bfc3   37 seconds ago   444MB


加载镜像
任何装 docker 的地方加载镜像保存文件,使其恢复为一个镜像
docker load -i 镜像保存文件位置


查看所有容器 -----包含正在运行 和已停止的
docker ps -a

运行一个容器
# -it 表示 与容器进行交互式启动 -d 表示可后台运行容器 （守护式运行）  --name 给要运行的容器 起的名字  /bin/bash  交互路径
docker run -it -d --name 要取的别名 镜像名:Tag /bin/bash 

# netstat是控制台命令,是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息
netstat -untlp


容器端口与服务器端口映射
命令：
-p 宿主机端口:容器端口
-p 8888:6379 解析 将容器内部的 6379端口与docker 宿主机（docker装在哪太服务器 那台服务器 就是其数组机）8888 端口进行映射 那通过外部访问宿主机8888端口 即可访问到 docker 容器 6379 端口了
docker run -itd --name redis002 -p 8888:6379 redis:5.0.5 /bin/bash

停止容器
docker stop 容器ID/容器名

重启容器
docker restart 容器ID/容器名

启动容器
docker start 容器ID/容器名

kill 容器
docker kill 容器ID/容器名

启动容器时，使用docker run命令时 添加参数--restart=always 便表示，该容器随docker服务启动而自动启动
docker run -itd --name redis002 -p 8888:6379 --restart=always  redis:5.0.5 /bin/bash


不想删容器，又想让这个容器设置开机自启动，那么我们修改其启动配置即可！
命令:
docker  update --restart=always 容器Id 或者 容器名
或
docker container update --restart=always 容器Id 或者 容器名

数据挂载
-v 宿主机文件存储位置:容器内文件位置
docker run -d -p 6379:6379 --name redis505 --restart=always  -v /var/lib/redis/data/:/data -v /var/lib/redis/conf/:/usr/local/etc/redis/redis.conf  redis:5.0.5 --requirepass "password"


更换容器名,想给容器换个霸气炫酷吊炸天的名字？
docker rename 容器ID/容器名 新容器名

提交一个镜像
我们运行的容器可能在镜像的基础上做了一些修改，有时候我们希望保存起来，封装成一个更新的镜像，这时候我们就需要使用 commit 命令来构建一个新的镜像
docker commit -m="提交信息" -a="作者信息" 容器名/容器ID 提交后的镜像名:Tag

-------------------------------------
docker 运维命令
可能有时候发布会遇到如下错误:
docker: write /var/lib/docker/tmp/GetImageBlob325372670: no space left on device
这个错误是docker在写入的时候报错无机器无空间

查看docker工作目录
sudo docker info | grep "Docker Root Dir"
du -hs /var/lib/docker/ 
docker system df

删除 无用的容器和 镜像
#  删除异常停止的容器
docker rm `docker ps -a | grep Exited | awk '{print $1}'` 

#  删除名称或标签为none的镜像
docker rmi -f  `docker images | grep '<none>' | awk '{print $3}'`

清除所有无容器使用的镜像  
docker system prune -a

查找大文件
find / -type f -size +100M -print0 | xargs -0 du -h | sort -nr

查找指定docker使用目录下大于指定大小文件
find / -type f -size +100M -print0 | xargs -0 du -h | sort -nr |grep '/var/lib/docker/overlay2/*'



